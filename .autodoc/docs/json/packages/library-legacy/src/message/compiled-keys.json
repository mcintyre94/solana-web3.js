{
  "fileName": "compiled-keys.ts",
  "filePath": "packages/library-legacy/src/message/compiled-keys.ts",
  "url": "https://github.com/solana-labs/solana-web3.js/blob/master/packages/library-legacy/src/message/compiled-keys.ts",
  "summary": "The `CompiledKeys` class in `solana-web3.js` is responsible for compiling a list of keys and their metadata that are required for a transaction to execute. It provides a way to extract the message components required for a transaction and also extract the address lookup table for a given program. \n\nThe `compile` method takes an array of `TransactionInstruction` objects and a `payer` public key as input. It then iterates over each instruction and extracts the keys required for the transaction. It creates a `KeyMetaMap` object that maps each key to its metadata, which includes whether it is a signer, writable, or invoked. The `payer` key is marked as a signer and writable. The `compile` method returns a new `CompiledKeys` object with the payer key and the `KeyMetaMap`.\n\nThe `getMessageComponents` method extracts the message header and the static account keys required for a transaction. It first filters the keys based on their metadata and then creates a `MessageHeader` object with the number of required signatures, readonly signed accounts, and readonly unsigned accounts. It then creates an array of `PublicKey` objects with all the static account keys and returns the message header and the static account keys as a tuple.\n\nThe `extractTableLookup` method extracts the address lookup table for a given program. It takes an `AddressLookupTableAccount` object as input and returns a tuple of `MessageAddressTableLookup` and `AccountKeysFromLookups`. It first filters the keys based on their metadata and then creates two arrays of indexes and drained keys for writable and readonly keys. It then creates a `MessageAddressTableLookup` object with the program key, writable indexes, and readonly indexes. It also creates an `AccountKeysFromLookups` object with the drained writable and readonly keys. If no keys are found, it returns undefined.\n\nOverall, the `CompiledKeys` class provides a way to compile and extract the required keys and metadata for a transaction. It can be used in conjunction with other classes in `solana-web3.js` to build and execute transactions on the Solana blockchain. \n\nExample usage:\n\n```\nimport {CompiledKeys} from 'solana-web3.js';\n\nconst instructions = [...]; // array of TransactionInstruction objects\nconst payer = new PublicKey('...'); // payer public key\n\nconst compiledKeys = CompiledKeys.compile(instructions, payer);\nconst [header, staticAccountKeys] = compiledKeys.getMessageComponents();\nconst lookup = compiledKeys.extractTableLookup(addressLookupTableAccount);\n```",
  "questions": "1. What is the purpose of the `CompiledKeys` class and how is it used?\n- The `CompiledKeys` class is used to compile a list of account keys and their metadata from a list of transaction instructions and a payer public key. It is used to extract message components and extract table lookups.\n\n2. What is the purpose of the `getMessageComponents` method and what does it return?\n- The `getMessageComponents` method returns a tuple containing a `MessageHeader` object and an array of `PublicKey` objects representing the static account keys. It is used to extract the message components needed to construct a Solana transaction.\n\n3. What is the purpose of the `extractTableLookup` method and what does it return?\n- The `extractTableLookup` method is used to extract a `MessageAddressTableLookup` object and an `AccountKeysFromLookups` object from a given `AddressLookupTableAccount`. It returns `undefined` if no keys were found in the lookup table."
}