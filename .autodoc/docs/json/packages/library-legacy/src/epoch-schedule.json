{
  "fileName": "epoch-schedule.ts",
  "filePath": "packages/library-legacy/src/epoch-schedule.ts",
  "url": "https://github.com/solana-labs/solana-web3.js/blob/master/packages/library-legacy/src/epoch-schedule.ts",
  "summary": "The `solana-web3.js` file contains a class called `EpochSchedule` that represents the epoch schedule of the Solana blockchain. An epoch is a period of time during which a set of validators are responsible for processing transactions and creating new blocks. The `EpochSchedule` class provides methods for calculating various properties of an epoch, such as its start and end slots, given a slot number.\n\nThe `EpochSchedule` class has five properties: `slotsPerEpoch`, `leaderScheduleSlotOffset`, `warmup`, `firstNormalEpoch`, and `firstNormalSlot`. These properties are set in the constructor and represent various parameters of the epoch schedule.\n\nThe `EpochSchedule` class has several methods for calculating epoch-related properties. The `getEpoch` method takes a slot number and returns the epoch number that the slot belongs to. The `getEpochAndSlotIndex` method takes a slot number and returns a tuple containing the epoch number and the slot index within the epoch. The `getFirstSlotInEpoch` and `getLastSlotInEpoch` methods take an epoch number and return the first and last slots of the epoch, respectively. The `getSlotsInEpoch` method takes an epoch number and returns the number of slots in the epoch.\n\nThe `getEpochAndSlotIndex` method is the most complex method in the class. It first checks if the slot is before the first normal slot (i.e., before the first epoch with `slotsPerEpoch` slots). If so, it calculates the epoch number and slot index using a formula that involves finding the smallest power of two greater than or equal to the slot number. If the slot is after the first normal slot, it calculates the epoch number and slot index using simple arithmetic.\n\nOverall, the `EpochSchedule` class provides a way to calculate various properties of an epoch given a slot number. This is useful for applications that need to work with epochs, such as validators that need to know which epoch they are currently processing. Here is an example of how the `EpochSchedule` class might be used:\n\n```\nimport { Connection } from '@solana/web3.js';\n\nasync function printEpochInfo() {\n  const connection = new Connection('https://api.mainnet-beta.solana.com');\n  const epochSchedule = await connection.getEpochSchedule();\n  const currentSlot = await connection.getSlot();\n  const [currentEpoch, slotIndex] = epochSchedule.getEpochAndSlotIndex(currentSlot);\n  console.log(`Current epoch: ${currentEpoch}`);\n  console.log(`Current slot index: ${slotIndex}`);\n  console.log(`First slot of current epoch: ${epochSchedule.getFirstSlotInEpoch(currentEpoch)}`);\n  console.log(`Last slot of current epoch: ${epochSchedule.getLastSlotInEpoch(currentEpoch)}`);\n  console.log(`Number of slots in current epoch: ${epochSchedule.getSlotsInEpoch(currentEpoch)}`);\n}\n\nprintEpochInfo();\n```",
  "questions": "1. What is the purpose of the `trailingZeros` function?\n- The `trailingZeros` function returns the number of trailing zeros in the binary representation of a given number. It is likely used in other functions to perform binary operations.\n\n2. What is the significance of the `MINIMUM_SLOT_PER_EPOCH` constant?\n- The `MINIMUM_SLOT_PER_EPOCH` constant is used in several functions to calculate epoch-related values. It represents the minimum number of slots in an epoch.\n\n3. How is the `getEpochAndSlotIndex` function used?\n- The `getEpochAndSlotIndex` function takes a slot number and returns a tuple containing the epoch and slot index for that slot. It is likely used to perform operations on specific slots within an epoch."
}